#manual run test:
#docker run --rm -it -e HOST=127.0.0.1 -e PORT=5432 -e DB=gis -e TBL=public.llh -e USER=docker -e PASS='docker' -p 8090:8090 -v /home/pi/track/server.py:/usr/src/app/server.py track  python server.py
##
#docker-compose test:
#docker-compose build track
#docker-compose up -d track
# & create table with db.sql
# now connect your rover Rtklib solution to TCP client IP:8090 with LLH format.

version: '3'
volumes:
  postgis:
services:  
  track:
    build: /home/pi/track
    ports:
      - 8090:8090
    restart: always
    environment:
      - HOST=postgis
      - PORT=5432
      - DB=gis
      - TBL=public.llh
      - USER=docker
      - PASS=docker
  postgis:
    image: kartoza/postgis:11.5-2.5
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - POSTGRES_DBNAME=gis
      - ALLOW_IP_RANGE=0.0.0.0/0
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis
    restart: always
    volumes:
      - postgiscaster:/var/lib/postgresql
      - /home/pi/pg_backup:/srv
